{"version":3,"sources":["components/ScrollToTop.jsx","Utilities.js","components/Spinner.jsx","components/PostImage.jsx","components/pages/Home.jsx","App.jsx","serviceWorker.js","StoreMain.js","index.js"],"names":["ScrollToTop","prevProps","this","props","location","window","scrollTo","children","React","Component","withRouter","Utilities","x","toString","replace","name","parts","document","cookie","split","length","pop","shift","s","localStorage","getItem","console","log","undefined","JSON","parse","atob","object","setItem","btoa","stringify","url","params","u","param","encodeURIComponent","slice","Spinner","state","className","PostImage","bind","useDoubleTap","event","onDoubleTap","src","alt","Home","observer","pageHeight","currentScrollPosition","subreddit","isBookmarksOpen","titleMode","bookmarks","keyColor","nsfw","images","icon","savedPosts","title","image","bottomTriggerRef","createRef","onScroll","handleChange","handleSearchEnter","handlePostDoubleTap","addEventListener","store","init","setState","getPrefObject","removeEventListener","e","current","getBoundingClientRect","bottom","innerHeight","isLoading","getNextPage","mode","key","onClick","setTitleMode","style","backgroundImage","isNSFW","class","type","placeholder","onKeyDown","autoCapitalize","onChange","handleSearch","isInitialLoading","posts","map","post","data","p","includes","target","value","val","parseFloat","setSubreddit","fetchPosts","sIcon","sColor","sNSFW","sSubr","getSubredditInfo","then","success","error","finally","cIcon","cColor","cNSFW","cSubr","push","setPrefObject","sr","filter","b","sp","components","i","handleBookmarkPress","backgroundColor","handleBookmarksRemoveButton","height","handleClearBookmarks","handleBookmarksButton","renderBookmarks","renderTitle","handleBookmarksAddButton","renderItems","position","ref","App","path","exact","Boolean","hostname","match","StoreMain","endpoint","icon_img","over18","fetch","res","json","after","nPost","Promise","resolve","reject","observable","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.b9b23a83.chunk.js","sourcesContent":["import React from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\nclass ScrollToTop extends React.Component {\r\n    componentDidUpdate(prevProps) {\r\n        if (this.props.location !== prevProps.location) {\r\n            window.scrollTo(0, 0)\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return this.props.children\r\n    }\r\n}\r\n\r\nexport default withRouter(ScrollToTop)","export default class Utilities {\r\n    static numberWithCommas(x) {\r\n        return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n    }\r\n\r\n    static getCookie(name) {\r\n        const value = `; ${document.cookie}`;\r\n        const parts = value.split(`; ${name}=`);\r\n        if (parts.length === 2) return parts.pop().split(';').shift();\r\n    }\r\n\r\n    static getPrefObject(name) {\r\n        let s = window.localStorage.getItem(name);\r\n        console.log(s);\r\n        return s != null && s != undefined && s.length > 0 ? JSON.parse(atob(s)) : undefined;\r\n    }\r\n\r\n    static setPrefObject(name, object) {\r\n        window.localStorage.setItem(name, btoa(JSON.stringify(object)));\r\n    }\r\n\r\n    static querify(url, params) {\r\n        var u = url + \"?\";\r\n\r\n        for(var param of params) {\r\n            u += param[1] != null && param[1] != undefined ? (param[0] + \"=\") + encodeURIComponent(param[1]) + \"&\" : \"\";\r\n        }\r\n\r\n        return u.slice(0, -1);\r\n    }\r\n}","import React, { Component } from 'react'\r\n\r\nclass Spinner extends Component {\r\n    state = {}\r\n    render() { \r\n        return (\r\n            <div className=\"loading\">\r\n                <div className=\"loading-circle\">\r\n                    <div className=\"loading-circle__item-background\"></div>\r\n                    <div className=\"loading-circle__item-3\"></div>\r\n                    <div className=\"loading-circle__item-2\"></div>\r\n                    <div className=\"loading-circle__item\"></div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n \r\nexport default Spinner;","import React, { Component } from 'react';\r\nimport { useDoubleTap } from 'use-double-tap';\r\n\r\nconst PostImage = (props) => {\r\n    const bind = useDoubleTap((event) => {\r\n        // Your action here\r\n        console.log('Double tapped');\r\n        if(props.onDoubleTap) {\r\n            props.onDoubleTap();\r\n        }\r\n    });\r\n\r\n    return <img {...bind} src={props.src} alt={props.alt ?? \"\"} />;\r\n}\r\n\r\nexport default PostImage;","import React, { Component } from 'react';\r\nimport { observer } from \"mobx-react\";\r\n\r\nimport u from '../../Utilities';\r\nimport Spinner from '../Spinner';\r\nimport PostImage from '../PostImage';\r\n\r\n@observer\r\nclass Home extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            pageHeight: 100000,\r\n            currentScrollPosition: 0,\r\n            subreddit: \"\",\r\n            isBookmarksOpen: false,\r\n            titleMode: \"view\",\r\n            bookmarks: [\r\n                {\r\n                    subreddit: \"\",\r\n                    keyColor: \"\",\r\n                    nsfw: false,\r\n                    images: {\r\n                        icon: \"\"\r\n                    }\r\n                }\r\n            ],\r\n            savedPosts: [\r\n                {\r\n                    name: \"\",\r\n                    title: \"\",\r\n                    image: \"\"\r\n                }\r\n            ]\r\n        }\r\n        this.bottomTriggerRef = React.createRef();\r\n        this.onScroll = this.onScroll.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSearchEnter = this.handleSearchEnter.bind(this);\r\n        this.handlePostDoubleTap = this.handlePostDoubleTap.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        window.addEventListener(\"scroll\", this.onScroll);\r\n        this.props.store.init();\r\n        this.setState({\r\n            bookmarks: u.getPrefObject(\"ss\") ?? []\r\n        });\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener(\"scroll\", this.onScroll);\r\n    }\r\n\r\n    onScroll(e) {\r\n        if(this.bottomTriggerRef.current.getBoundingClientRect().bottom - window.innerHeight < 2000 && this.props.store.isLoading == false) {\r\n            this.props.store.getNextPage();\r\n        }\r\n    }\r\n\r\n    setTitleMode(mode) {\r\n        this.setState((state) => {\r\n            return {\r\n                ...state,\r\n                titleMode: mode\r\n            };\r\n        });\r\n    }\r\n\r\n    renderTitle() {\r\n        if(this.state.titleMode == \"view\") {\r\n            return (\r\n                <div key={\"k\"} className=\"nav-desktop__title\" onClick={() => this.setTitleMode(\"edit\")}>\r\n                    <div className=\"nav-desktop__title__icon\" style={{backgroundImage: \"url(\" + this.props.store.icon + \")\"}}></div>\r\n                    <h4>r/{this.props.store.subreddit}</h4>\r\n                    {this.props.store.isNSFW ? <div className=\"nav-desktop__title__nsfw\">NSFW</div> : \"\"}\r\n                    <i class=\"fas fa-pencil-alt\"></i>\r\n                </div>\r\n            );\r\n        } else if(this.state.titleMode == \"edit\") {\r\n            return (\r\n                <div key={\"e\"} className=\"nav-desktop__edit\">\r\n                    <input type=\"text\" placeholder=\"Enter a subreddit...\" onKeyDown={this.handleSearchEnter} name=\"subreddit\" autoCapitalize=\"off\" onChange={this.handleChange}/>\r\n                    <div className=\"nav-desktop__edit__button\" onClick={() => this.handleSearch()}>\r\n                        <i class=\"fas fa-search\"></i>\r\n                    </div>\r\n                    <div className=\"nav-desktop__edit__button\" onClick={() => this.setTitleMode(\"view\")}>\r\n                        <i class=\"fas fa-window-close\"></i>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n\r\n    renderItems() {\r\n        if(!this.props.store.isInitialLoading) {\r\n            return this.props.store.posts.map((post) => {\r\n                let u = post.data.url;\r\n                const p = {\r\n                    name: post.data.name,\r\n                    title: post.data.title,\r\n                    image: post.data.url\r\n                }\r\n                if(u.includes(\"jpg\", \"png\", \"gif\", \"jpeg\", \"bmp\", \"tiff\") && !u.includes(\"/a/\")) {\r\n                    return (\r\n                        <div className=\"posts__item\">\r\n                            <p>{post.data.title}</p>\r\n                            <PostImage key={post.data.name} src={post.data.url} alt=\"\" onDoubleTap={() => this.handlePostDoubleTap(p)}/>\r\n                        </div>\r\n                    );\r\n                }\r\n            });\r\n        } else {\r\n            return (\r\n                <Spinner />\r\n            );\r\n        }\r\n    }\r\n\r\n\r\n    handleChange(e) {\r\n        const { name, type, value } = e.target;\r\n        const val = type === \"number\" ? parseFloat(value) : value;\r\n        this.setState({ [name]: val });\r\n    }\r\n\r\n    handleSearch() {\r\n        if(this.state.subreddit.length > 3) {\r\n            window.scrollTo(0, 0)\r\n            this.props.store.setSubreddit(this.state.subreddit);\r\n            this.props.store.fetchPosts();\r\n            this.setTitleMode(\"view\");\r\n        }\r\n    }\r\n\r\n    handleBookmarksButton() {\r\n        this.setState((state) => {\r\n            return {\r\n                ...state,\r\n                isBookmarksOpen: !state.isBookmarksOpen\r\n            }\r\n        });\r\n    }\r\n\r\n    handleBookmarksAddButton() {\r\n        let sIcon = \"\";\r\n        let sColor = \"\";\r\n        let sNSFW = false;\r\n        let sSubr = \"\";\r\n        this.props.store.getSubredditInfo(this.state.subreddit).then(\r\n            (success) => {\r\n                sIcon = success[\"data\"][\"icon_img\"];\r\n                sColor = success[\"data\"][\"primary_color\"];\r\n                sNSFW = success[\"data\"][\"over18\"];\r\n                sSubr = success[\"data\"][\"display_name\"];\r\n            },\r\n            (error) => {\r\n\r\n            }\r\n        ).finally(\r\n            () => {\r\n                const cIcon = sIcon;\r\n                const cColor = sColor;\r\n                const cNSFW = sNSFW;\r\n                const cSubr = sSubr;\r\n                this.setState((state) => {\r\n                    let s = state;\r\n                    s.bookmarks.push({\r\n                        subreddit: cSubr,\r\n                        keyColor: cColor,\r\n                        nsfw: cNSFW,\r\n                        images: {\r\n                            icon: cIcon\r\n                        }\r\n                    })\r\n\r\n                    return s;\r\n                });\r\n                u.setPrefObject(\"ss\", this.state.bookmarks);\r\n            }\r\n        );\r\n    }\r\n\r\n    handleBookmarksRemoveButton(sr) {\r\n        this.setState((state) => {\r\n            let s = state.bookmarks.filter((b) => {\r\n                return !(b.subreddit == sr);\r\n            });\r\n            return {\r\n                ...state,\r\n                bookmarks: s\r\n            };\r\n        });\r\n        u.setPrefObject(\"ss\", this.state.bookmarks);\r\n    }\r\n\r\n    handleSearchEnter(e) {\r\n        if(e.key == \"Enter\") {\r\n            this.handleSearch();\r\n        }\r\n    }\r\n\r\n    handlePostDoubleTap(post) {\r\n        console.log(post.name);\r\n        this.setState((state) => {\r\n            let sp = state.savedPosts;\r\n            sp.push(post);\r\n            return {\r\n                ...state,\r\n                savedPosts: sp\r\n            }\r\n        });\r\n    }\r\n\r\n    renderBookmarks() {\r\n        if(this.state.isBookmarksOpen) {\r\n            var components = [];\r\n            var i = 0;\r\n            for(var b of this.state.bookmarks) {\r\n                const s = b.subreddit;\r\n                components.push(\r\n                    <div key={i} className={\"bookmarks__item\" + (b.nsfw ? \" bookmarks__item--nsfw\" : \"\")}>\r\n                        <div className=\"bookmarks__item__icon\" onClick={() => this.handleBookmarkPress(s)} style={{backgroundImage: \"url(\" + b.images.icon + \")\", backgroundColor: b.keyColor}}></div>\r\n                        <div className=\"bookmarks__item__subreddit\" onClick={() => this.handleBookmarkPress(s)}>r/{b.subreddit}</div>\r\n                        <div className=\"bookmarks__item__remove\" onClick={() => this.handleBookmarksRemoveButton(s)}>X</div>\r\n                    </div>\r\n                );\r\n                i++;\r\n            }\r\n            return (\r\n                <div className=\"bookmarks\">\r\n                    {components}\r\n                    <div style={{height: \"10px\"}}></div>\r\n                    <div className=\"bookmarks__button\">\r\n                        Backup bookmarks to clipboard\r\n                    </div>\r\n                    <div className=\"bookmarks__button\" onClick={() => this.handleClearBookmarks()}>\r\n                        Clear bookmarks\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n\r\n    handleBookmarkPress(subreddit) {\r\n        this.props.store.setSubreddit(subreddit);\r\n        this.props.store.fetchPosts();\r\n        window.scrollTo(0, 0);\r\n        this.handleBookmarksButton();\r\n    }\r\n\r\n    handleClearBookmarks() {\r\n        u.setPrefObject(\"ss\", []);\r\n        this.setState({\r\n            bookmarks: []\r\n        });\r\n    }\r\n\r\n    render() { \r\n        return (\r\n            <div>\r\n                {this.renderBookmarks()}\r\n\r\n                <div className=\"nav\">\r\n                    <div className=\"nav-desktop\">\r\n                        <div className=\"nav-desktop__container\">\r\n                            <div className=\"nav-desktop__menu-button\" onClick={() => this.handleBookmarksButton()}>\r\n                                <i class=\"fas fa-bars\"></i>\r\n                            </div>\r\n                            {this.renderTitle()}\r\n                            \r\n                            <div className=\"nav-desktop__add-button\" onClick={() => this.handleBookmarksAddButton()}>\r\n                                <i class=\"fas fa-plus-circle\"></i>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"nav-mobile\"></div>\r\n                </div>\r\n\r\n                <div className=\"nav-desktop--spacer\"></div>\r\n                <div className=\"posts\">\r\n                    <div style={{height: \"15px\"}}></div>\r\n                    {this.renderItems()}\r\n                </div>\r\n                <div key={\"cokc\"} style={{position: \"relative\"}} ref={this.bottomTriggerRef}></div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n \r\nexport default Home;","import React, { Component } from 'react';\r\n\r\nimport {BrowserRouter, Switch, Route} from \"react-router-dom\";\r\nimport ScrollToTop from \"./components/ScrollToTop\";\r\nimport {RemountingRoute} from './components/RemountingRoute';\r\n\r\nimport Home from './components/pages/Home';\r\n\r\nclass App extends Component {\r\n    render() {\r\n        return (\r\n            <BrowserRouter>\r\n                <ScrollToTop>\r\n                    <Switch>\r\n                        <Route path=\"/\" exact><Home store={this.props.store}/></Route>\r\n                    </Switch>\r\n                </ScrollToTop>\r\n            </BrowserRouter>\r\n        );\r\n    }\r\n}\r\n \r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import {observable} from \"mobx\";\r\n\r\nimport u from './Utilities';\r\n\r\nexport default class StoreMain {\r\n    subreddit = \"\";\r\n    endpoint = \"\";\r\n    @observable isNSFW = false;\r\n    @observable icon = \"\";\r\n\r\n    @observable isInitialLoading = true;\r\n    @observable isLoading = false;\r\n    @observable posts = [];\r\n    @observable after = \"\";\r\n    // https://www.reddit.com/by_id/t3_ii6pjh.json\r\n    init() {\r\n        this.setSubreddit(\"gardening\");\r\n        this.fetchPosts();\r\n    }\r\n\r\n    setSubreddit(subreddit) {\r\n        this.subreddit = subreddit;\r\n        this.endpoint = \"https://www.reddit.com/r/\" + subreddit + \".json\";\r\n    }\r\n    \r\n    fetchPosts() {\r\n        this.isInitialLoading = true;\r\n        this.getSubredditInfo(this.subreddit).then(\r\n            (success) => {\r\n                this.icon = success.data.icon_img;\r\n                this.isNSFW = success.data.over18;\r\n            },\r\n            (error) => {\r\n\r\n            }\r\n        ).finally(\r\n            () => {\r\n                fetch(this.endpoint).then(res => res.json()).then(\r\n                    (success) => {\r\n                        this.posts = [];\r\n                        this.after = \"\";\r\n                        this.icon = success.data\r\n                        success.data.children.map((post) => {\r\n                            let nPost = post;\r\n                            if(nPost.data.url.includes(\"/imgur.com/\") && !nPost.data.url.includes(\".jpg\") && !nPost.data.url.includes(\".png\")) {\r\n                                nPost.data.url += \".jpg\";\r\n                                console.log(nPost.data.url);\r\n                            }\r\n                            this.posts.push(nPost);\r\n                        });\r\n                        this.isInitialLoading = false;\r\n                    },\r\n                    (error) => {\r\n            \r\n                    }\r\n                );\r\n            }\r\n        );\r\n    }\r\n\r\n    getSubredditInfo(subreddit) {\r\n        return new Promise((resolve, reject) => {\r\n            fetch(\"https://www.reddit.com/r/\" + subreddit + \"/about.json\").then(res => res.json()).then(\r\n                (success) => {\r\n                    resolve(success);\r\n                },\r\n                (error) => {\r\n                    reject(error);\r\n                }\r\n            );\r\n        });\r\n    }\r\n\r\n    getNextPage() {\r\n        this.isLoading = true;\r\n        this.after = this.posts[this.posts.length-1].data.name;\r\n        fetch(this.endpoint + \"?after=\" + this.after).then(res => res.json()).then(\r\n            (success) => {\r\n                success.data.children.map((post) => {\r\n                    let nPost = post;\r\n                    if(nPost.data.url.includes(\"/imgur.com/\")) {\r\n                        nPost.data.url += \".jpg\";\r\n                        console.log(nPost.data.url);\r\n                    }\r\n                    this.posts.push(nPost);\r\n                });\r\n                this.isLoading = false;\r\n            },\r\n            (error) => {\r\n                this.isLoading = false;\r\n            }\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport \"./static/css/main.scss\";\r\nimport \"./static/css/fa.css\";\r\n\r\nimport StoreMain from \"./StoreMain.js\";\r\n\r\nvar store = window.store = new StoreMain();\r\n\r\nReactDOM.render(\r\n  <App store={store} />,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}